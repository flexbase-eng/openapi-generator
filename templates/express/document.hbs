/* eslint-disable */
/* ------------------------------------------------------------
 File auto-generated

 @summary {{astDocument.title}}
 @description {{astDocument.description}}
 @version {{astDocument.version}}
------------------------------------------------------------ */

const express = require('express')
const router = express.Router()

function addOrSet(map, key, value) {
  const existing = map.get(key);

  if (existing === undefined) {
    map.set(key, value);
  } else {
    map.set(key, [...existing, ...value]);
  }

  return map;
}

function handleRequestValidatorErrors(errors) {
  const error = Object.fromEntries(errors);
  if (Object.keys(error).length > 0) {
    throw new BadRequestException({ statusCode: 400, message: 'Bad Request', error });
  }
}

function verifyDefinition(inputToValidate, properties) {
  const errors = new Map();
  Object.keys(inputToValidate).filter(prop => !properties.has(prop)).forEach(prop => errors.set(prop, 'unknown property'));
  return errors;
}

function handleValidation(value, validatorFn, handleErrors) {
  const validatorResponse = validatorFn(value);
  validatorResponse.errors = new Map([...validatorResponse.errors, ...verifyDefinition(value, new Set(validatorResponse.allowedProperties))]);
  handleErrors(validatorResponse.errors);  
}

{{#astDocument}}

{{!-- first pass register all references --}}
{{#*inline "reference"}}
{{#compare node "===" "ModelDeclaration"}}
{{#registerValidator .}}{{>validation.expression id suffix=./validatorSuffix prefix=./validatorPrefix}}{{/registerValidator}}
{{/compare}}
{{/inline}}

{{#each models}}{{>reference modelSuffix="Model" validatorSuffix="ModelValidator"}}{{/each}}
{{#each responses}}{{>reference modelSuffix="Response" validatorSuffix="ResponseValidator"}}{{/each}}
{{#each requests}}{{>reference modelSuffix="Requests" validatorSuffix="RequestsValidator"}}{{/each}}
{{#each pathParameters}}{{>reference modelSuffix="PathParameter" validatorSuffix="PathParameterValidator"}}{{/each}}
{{#each headerParameters}}{{>reference modelSuffix="HeaderParameter" validatorSuffix="HeaderParameterValidator"}}{{/each}}
{{#each queryParameters}}{{>reference modelSuffix="QueryParameter" validatorSuffix="QueryParameterValidator"}}{{/each}}
{{#each cookieParameters}}{{>reference modelSuffix="CookieParameter" validatorSuffix="CookieParameterValidator"}}{{/each}}

{{#if models}}
//#region Models
{{#each models}}
{{>validation.declaration suffix="ModelValidator"}}
{{/each}}
//#endregion
{{/if}}

{{#if responses}}
//#region Responses
{{#each responses}}
{{!-- {{>validation.declaration suffix="ResponseValidator"}} --}}
{{/each}}
//#endregion
{{/if}}

{{#if requests}}
//#region Requests
{{#each requests}}
{{>validation.declaration suffix="RequestsValidator"}}
{{/each}}
//#endregion
{{/if}}

{{#if pathParameters}}
//#region Path Parameters
{{#each pathParameters}}
{{>validation.declaration suffix="PathParameterValidator"}}
{{/each}}
//#endregion
{{/if}}

{{#if headerParameters}}
//#region Header Parameters
{{#each headerParameters}}
{{>validation.declaration suffix="HeaderParameterValidator"}}
{{/each}}
//#endregion
{{/if}}

{{#if queryParameters}}
//#region Query Parameters
{{#each queryParameters}}
{{>validation.declaration suffix="QueryParameterValidator"}}
{{/each}}
//#endregion
{{/if}}

{{#if cookieParameters}}
//#region Cookie Parameters
{{#each cookieParameters}}
{{>validation.declaration suffix="CookieParameterValidator"}}
{{/each}}
//#endregion
{{/if}}

{{#each operations}}
{{>declaration prefix=(replace ../title (toRegex "(-|\.| )+" "g") "_")}}
{{/each}}

{{/astDocument}}
