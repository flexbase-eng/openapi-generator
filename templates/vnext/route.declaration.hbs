{{~#*inline "validator"}}
{{~#compare validation "!==" false}}
{{#compare type "===" "reference"}}
    utilities.handleValidation<{{>model.expression . prefix=./modelPrefix suffix=./modelSuffix}}>({{input}}, {{& prefix}}{{& resolveValidator2 .}}{{& suffix}}, utilities.handleRequestValidatorErrors);
{{else}}
    {{log "Only references are support for validation currently" level="warn"}}
{{/compare}}
{{else}}
{{input}} as {{>model.expression . prefix=./modelPrefix suffix=./modelSuffix}};
{{/compare~}}
{{/inline~}}

{{~#compare type "===" "operation"}}
{{>comments2}}
{{prefix}}Router.{{lowercase method}}<object, object, {{#if request}}{{>model.expression request prefix="models."}},{{/if}}>('{{replace path (toRegex "{(\w+)}" "g") ":$1"}}', 
    {{~#if (isArray security)}}
    {{^isEmpty security}}routerAuthMiddleware([{{#each security}}{{#each names}}'{{.}}', {{/each}}{{/each}}]),
    {{else}} /* anonymous */
    {{/isEmpty}}
    {{else}}routerAuthMiddleware({{extensions.x-mfa}}),{{/if~}}
    {{~#if request}}{{>model.expression request prefix="parsers."}}Parser(),{{else}}ensureNoContentMiddleware(),{{/if~}}
    
    async (ctx, next) => {

    {{#if request}}
    const body = ctx.body;
    {{/if}}
    {{#if pathParameter}}
    const params = {{>validator pathParameter input="ctx.params" prefix="validators." modelPrefix="models." validation=../extensions.x-validation}}
    {{/if}}    
    {{#if queryParameter}}
    const query = {{>validator queryParameter input="ctx.request.query" prefix="validators." modelPrefix="models." validation=../extensions.x-validation}}
    {{/if}}
    {{#if headerParameter}}
    const headers = {{>validator headerParameter input="ctx.request.headers" prefix="validators." modelPrefix="models." validation=../extensions.x-validation}};
    {{/if}}
    {{#if cookieParameter}}
    {{log "Cookie parameters not supported yet" level="warn"}}
    /*
    * not supported yet
    * const cookies = {{>validator cookieParameter input="ctx.cookies" prefix="validators." modelPrefix="models." validation=../extensions.x-validation}};
    */
    {{/if}}

    {{#if response}}
    const response:    
    {{>model.expression response prefix="models."}}
    =
    {{else}}
    const response = undefined;
    {{/if}}

    await handlers.{{& replace operationId (toRegex "[_-]([a-z])" "gi") (function "(_, x)=>x.toUpperCase()") }}
    (ctx,
        {{~#if request}}body,{{/if~}}
        {{~#if pathParameter}}params,{{/if~}}
        {{~#if queryParameter}}query,{{/if~}}
        {{~#if headerParameter}}headers,{{/if~}}
    );

    utilities.serializeResponse(ctx, response);

    await next();
});
{{/compare~}}

{{~#compare type "===" "path"}}
{{#if operations}}{{#each operations}}
{{>route.declaration . prefix=../prefix path=../name}}
{{/each}}{{/if}}
{{/compare~}}