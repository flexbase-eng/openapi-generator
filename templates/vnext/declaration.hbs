{{>comments}}

{{#compare node "===" "ModelDeclaration"}}
export type {{>expression id suffix=./suffix prefix=./prefix}} = {{>expression definition}}
{{/compare}}

{{~#compare node "===" "PropertyDeclaration"}}
{{>expression id}}{{^required}}{{^defaultValue}}?{{/defaultValue}}{{/required}}: {{>expression definition enum=./enum}};
{{/compare~}}

{{~#*inline "validator"}}
{{~#compare validation "!==" false}}
{{#compare node "===" "ReferenceExpression"}}
    handleValidation<{{>expression . prefix=./modelPrefix suffix=./modelSuffix}}>({{input}}, {{& prefix}}{{& resolveValidator .}}{{& suffix}}, handleRequestValidatorErrors);
{{else}}
    {{log "Only references are support for validation currently" level="warn"}}
{{/compare}}
{{else}}
{{input}} as {{>expression . prefix=./modelPrefix suffix=./modelSuffix}};
{{/compare~}}
{{/inline~}}

{{~#compare node "===" "OperationDeclaration"}}
{{prefix}}Router.{{lowercase httpMethod}}<object, object, {{#requests.bodies}}{{>expression prefix="models."}},{{/requests.bodies}}>('{{replace path (toRegex "{(\w+)}" "g") ":$1"}}', 
    {{~#if (isArray security)}}
    {{^isEmpty security}}routerAuthMiddleware([{{#each security}}{{#each names}}'{{.}}', {{/each}}{{/each}}]),
    {{else}} /* anonymous */
    {{/isEmpty}}
    {{else}}
    routerAuthMiddleware({{extensions.x-mfa}}),
    {{/if~}}

    async (ctx, next) => {

    {{#if requests.bodies}}    
    const body = {{#requests.bodies}}{{>validator . input="ctx.request.body" prefix="validators." modelPrefix="models." validation=../extensions.x-validation}}{{/requests.bodies}};   
    {{/if}}
    {{#if requests.pathParameters}}
    const params = {{>validator requests.pathParameters input="ctx.params" prefix="validators." modelPrefix="models." validation=../extensions.x-validation}}
    {{/if}}    
    {{#if requests.queryParameters}}
    const query = {{>validator requests.queryParameters input="ctx.request.query" prefix="validators." modelPrefix="models." validation=../extensions.x-validation}}
    {{/if}}
    {{#if requests.headerParameters}}
    const headers = {{>validator requests.headerParameters input="ctx.request.headers" prefix="validators." modelPrefix="models." validation=../extensions.x-validation}};
    {{/if}}

    {{#if responses}}
    const response: 
    {{#forEach responses}}
    {{>expression . prefix="models."}} {{#unless isLast}}|{{/unless}}
    {{/forEach}}
    =
    {{else}}
    const response = {};
    {{/if}}

    await {{>expression id prefix="handlers."}}(ctx,
        {{~#if requests.bodies}}body,{{/if~}}
        {{~#if requests.pathParameters}}params,{{/if~}}
        {{~#if requests.queryParameters}}query,{{/if~}}
        {{~#if requests.headerParameters}}headers,{{/if~}}
    );

    serializeResponse(ctx, response);

    await next();
})

{{#if requests.cookieParameters}}{{log "Cookie parameters not supported yet" level="warn"}}{{/if}}
{{/compare~}}