{{>comments}}

{{#compare node "===" "ModelDeclaration"}}
export type {{>expression id suffix=./suffix prefix=./prefix}} = {{>expression definition}}
{{/compare}}

{{~#compare node "===" "PropertyDeclaration"}}
{{>expression id}}{{^required}}?{{/required}}: {{>expression definition enum=./enum}};
{{/compare~}}

{{~#compare node "===" "OperationDeclaration"}}
export const {{prefix}}_{{>expression id}} = async (
    {{#if requests.bodies}}    
    body:{{#requests.bodies}}{{> expression prefix="models."}},{{/requests.bodies}}
    {{/if}}
    {{#if requests.pathParameters}}
    path:{{#requests.pathParameters}}{{> expression prefix="models."}},{{/requests.pathParameters}}
    {{/if}}    
    {{#if requests.queryParameters}}
    query:{{#requests.queryParameters}}{{> expression prefix="models."}},{{/requests.queryParameters}}
    {{/if}}
    {{#if requests.headerParameters}}
    headers:{{#requests.headerParameters}}{{> expression prefix="models."}},{{/requests.headerParameters}}
    {{/if}}
) => {
    const endPoint = `{{replace path (toRegex "{(\w+)}" "g") "${path.$1}"}}`;

    const response = await fetch(endPoint);

    {{#if responses}}
    let rtn: 
    {{#forEach responses}}
    {{>expression . prefix="models."}} {{#unless isLast}}|{{/unless}}
    {{/forEach}}
    {{else}}
    const rtn = {};
    {{/if}}

    

}

{{/compare~}}