{{>comments}}

{{#compare node "===" "ModelDeclaration"}}
export type {{>expression id suffix=./suffix prefix=./prefix}} = {{>expression definition}}
{{/compare}}

{{~#compare node "===" "PropertyDeclaration"}}
{{>expression id}}{{^required}}?{{/required}}: {{>expression definition enum=./enum}};
{{/compare~}}

{{~#compare node "===" "OperationDeclaration"}}
async {{>expression id}}(
    {{#if requests.bodies}}    
    body:{{#requests.bodies}}{{> expression}},{{/requests.bodies}}
    {{/if}}
    {{#if requests.pathParameters}}
    path:{{#requests.pathParameters}}{{> expression}},{{/requests.pathParameters}}
    {{/if}}    
    {{#if requests.queryParameters}}
    query:{{#requests.queryParameters}}{{> expression}},{{/requests.queryParameters}}
    {{/if}}
    {{#if requests.headerParameters}}
    headers:{{#requests.headerParameters}}{{> expression}},{{/requests.headerParameters}}
    {{/if}}
): Promise<{
    status: number,
    error?: Error,
    {{#if responses}}
    data: 
    {{#forEach responses}}
    {{>expression .}} {{#unless isLast}}|{{/unless}}
    {{/forEach}}
    {{/if}}
    }> {
        return await this._requestHandler('{{& lowercase httpMethod}}', `{{replace path (toRegex "{(\w+)}" "g") "${path.$1}"}}`, {
        {{#if requests.bodies}}body,{{/if}}
        {{#if requests.queryParameters}}query: Object.keys(query).map(key => key + '=' + query[key]).join('&'),{{/if}}
        {{#if requests.headerParameters}}headers,{{/if}}
        });
}

{{#if requests.cookieParameters}}{{log "Cookie parameters not supported yet" level="warn"}}{{/if}}
{{/compare~}}