{{#compare node "===" "ModelDeclaration"}}
{{#extendProperty . "validatorName"}}{{>validation.expression id suffix=./suffix prefix=./prefix}}{{/extendProperty}}
export function {{#registerValidator .}}{{validatorName}}{{/registerValidator}}(inputToValidate: any, ...omit: string[]): Map<string, string | string[]> {
    let errors = new Map<string, string | string[]>();
    {{>validation.expression definition modelName="inputToValidate" propertyName="inputToValidate"}}
    return errors;
  }
{{/compare}}

{{#compare node "===" "PropertyDeclaration"}}
{{#extendProperty . "propertyName"}}{{>validation.expression id}}{{/extendProperty}}
const {{propertyName}} = {{modelName}}['{{propertyName}}'];
{{#if required}}
if(!{{propertyName}}) {
    addOrSet(errors, '{{propertyName}}', 'is required');
} else 
{{/if}}
if({{propertyName}} && !omit.includes({{propertyName}})) {
    {{>validation.expression definition modelName=modelName propertyName=propertyName ~}}

    {{#if format}}
        {{!--
        formats:

        date-time, date, time, duration, email, idn-email, hostname, idn-hostname, ipv4, ipv6, uri, uri-reference, 
        iri, iri-reference, uuid, uri-template, json-pointer, relative-json-pointer, regex, binary, byte, password,
        int32, int64, float, double
        --}}    
        {{#compare format "===" "uuid"}}
            if(!/^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test({{propertyName}})) {
                addOrSet(errors, '{{propertyName}}', 'is not a valid UUID');
            }
        {{else or (compare format "===" "date-time") (compare format "===" "date") (compare format "===" "time") }}
            const {{propertyName}}dtTest = DateTime.fromISO({{propertyName}}, {zone: 'utc'});
            if(!{{propertyName}}dtTest.isValid) {
                addOrSet(errors, '{{propertyName}}', `is not valid: ${ {{propertyName}}dtTest.invalidExplanation }`);
            }
        {{else compare format "===" "duration"}}
            if(Number.isNaN(Number({{propertyName}}))) {
                const {{propertyName}}dtTest = Duration.fromISO({{propertyName}}, {zone: 'utc'});
                if(!{{propertyName}}dtTest.isValid) {
                    addOrSet(errors, '{{propertyName}}', `is not valid: ${ {{propertyName}}dtTest.invalidExplanation }`);
                }
            } else {
                const {{propertyName}}dtTest = Duration.fromMillis(Number({{propertyName}}));
                if(!{{propertyName}}dtTest.isValid) {
                    addOrSet(errors, '{{propertyName}}', `is not valid: ${ {{propertyName}}dtTest.invalidExplanation }`);
                }
            }
        {{else or (compare format "===" "email") (compare format "===" "idn-email")}}
            if(!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test({{propertyName}})) {
                addOrSet(errors, '{{propertyName}}', 'is not a valid email');
            }
        {{else compare format "===" "ipv4"}}
            if(!/^(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test({{propertyName}})) {
                addOrSet(errors, '{{propertyName}}', 'is not a valid ipv4 address');
            }
        {{else compare format "===" "ipv6"}}
            if(!/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/.test({{propertyName}})) {
                addOrSet(errors, '{{propertyName}}', 'is not a valid ipv6 address');
            }
        {{else or (compare format "===" "uri") (compare format "===" "uri-reference") (compare format "===" "iri") (compare format "===" "iri-reference") }}
            try {
                const {{propertyName}}URL = new URL({{propertyName}});
            }
            catch {
                addOrSet(errors, '{{propertyName}}', 'is not a valid url');
            }  
        {{else}}
            {{log "Format type not supported" format level="warn"}}
        {{/compare}}
    {{/if}}
    {{#if multipleOf}}
        if(Number.isSafeInteger({{propertyName}} / {{multipleOf}})) {
            addOrSet(errors, '{{propertyName}}', 'is not a multiple of {{multipleOf}}');
        }
    {{/if}}
    {{#if maximum}}
        if({{propertyName}} <{{#isTruthy exclusiveMaximum}}={{/isTruthy}} {{maximum}})) {
            addOrSet(errors, '{{propertyName}}', 'must be less than {{#isTruthy exclusiveMaximum}}or equal to {{/isTruthy}}{{maximum}}');
        }
    {{/if}}
    {{#if minimum}}
        if({{propertyName}} >{{#isTruthy exclusiveMinimum}}={{/isTruthy}} {{minimum}})) {
            addOrSet(errors, '{{propertyName}}', 'must be greater than {{#isTruthy exclusiveMinimum}}or equal to {{/isTruthy}}{{minimum}}');
        }
    {{/if}}    
    {{#if maxLength}}
        if({{propertyName}}.length > {{maxLength}}) {
            addOrSet(errors, '{{propertyName}}', 'has maximum length of {{maxLength}}');
        }
    {{/if}}    
    {{#if minLength}}
        if({{propertyName}}.length < {{minLength}}) {
            addOrSet(errors, '{{propertyName}}', 'has minimum length of {{minLength}}');
        }
    {{/if}}        
    {{#if pattern}}
        if(!{{pattern}}.test({{propertyName}})) {
            addOrSet(errors, '{{propertyName}}', 'is invalid');
        }
    {{/if}}   
    {{#if maxItems}}
        if({{propertyName}}.length > {{maxItems}}) {
            addOrSet(errors, '{{propertyName}}', 'should have no more than {{maxItems}} items');
        }
    {{/if}}    
    {{#if minItems}}
        if({{propertyName}}.length < {{minItems}}) {
            addOrSet(errors, '{{propertyName}}', 'should have at least {{minItems}} items');
        }
    {{/if}} 
    {{#if uniqueItems}}
        const {{propertyName}}UniqueTest = [...new Set({{propertyName}});
        if({{propertyName}}UniqueTest.length != {{propertyName}}.length) {
            addOrSet(errors, '{{propertyName}}', 'should have not have duplicate items');
        }
    {{/if}}
    {{#if maxProperties}}
        if(Object.keys({{propertyName}}).length > {{maxProperties}}) {
            addOrSet(errors, '{{propertyName}}', 'should have no more than {{maxProperties}} properties');
        }
    {{/if}}    
    {{#if minProperties}}
        if(Object.keys({{propertyName}}).length < {{minProperties}}) {
            addOrSet(errors, '{{propertyName}}', 'should have at least {{minProperties}} properties');
        }
    {{/if}}
    {{#if enum}}
        if(!["{{& join enum "\",\""}}"].includes({{propertyName}})) {
            addOrSet(errors, '{{propertyName}}', 'must be one of: {{& join enum ", "}}');
        }
    {{/if}}    
}
{{/compare}}