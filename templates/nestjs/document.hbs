/* eslint-disable */
/* ------------------------------------------------------------
 File auto-generated

 @summary {{astDocument.title}}
 @description {{astDocument.description}}
 @version {{astDocument.version}}
------------------------------------------------------------ */

import { Body, Get, Param, Post, Put, Query, Patch, Delete, Headers, Head, Options, SetMetadata, PipeTransform, ArgumentMetadata, BadRequestException, InternalServerErrorException } from '@nestjs/common';
import { DateTime, Duration } from "luxon";

{{#astDocument}}
interface ValidatorResponse {
  errors: Map<string, string | string[]>;
  allowedProperties: string[];
}

type ValidatorFn = (inputToValidate: any) => ValidatorResponse;
type HandleErrorsFn = (errors: Map<string, string | string[]>) => void;

function stringToBoolean(value: string | undefined, defaultValue?: boolean): boolean | undefined | Error {
  if (!value) {
    return defaultValue;
  }

  if (['true', '1', 'yes', 'on'].includes(value.trim().toLowerCase())) return true;
  else if (['false', '0', 'no', 'off'].includes(value.trim().toLowerCase())) return false;
  else return new Error();
}

function stringToNumber(value: string | undefined, defaultValue?: number): number | undefined | Error {
  if (!value) {
    return defaultValue;
  }

  const num = Number(value);
  return Number.isNaN(num) ? new Error() : num;
}

function verifyDefinition(inputToValidate: any, properties: Set<string>): Map<string, string | string[]> {
  const errors = new Map<string, string | string[]>();
  Object.keys(inputToValidate).filter(prop => !properties.has(prop)).forEach(prop => errors.set(prop, 'unknown property'));
  return errors;
}

const handleRequestValidatorErrors: HandleErrorsFn = (errors: Map<string, string | string[]>) => {
  const error: Record<string, string | string[]> = Object.fromEntries(errors);
  if (Object.keys(error).length > 0) {
    throw new BadRequestException({ statusCode: 400, message: 'Bad Request', error });
  }
}

function addOrSet(map: Map<string, string | string[]>, key: string, value: string | string[]): Map<string, string | string[]> {
  const existing: undefined | string | string[] = map.get(key);

  if (existing === undefined) {
    map.set(key, value);
  } else {
    const temp: string[] = Array.isArray(existing) ? existing : [existing];
    if (Array.isArray(value)) temp.push(...value);
    else temp.push(value);
    map.set(key, temp);
  }

  return map;
}

function handleValidation(value: any, validatorFn: ValidatorFn, handleErrors: HandleErrorsFn) {
  const validatorResponse = validatorFn(value);
  validatorResponse.errors = new Map<string, string | string[]>([...validatorResponse.errors, ...verifyDefinition(value, new Set(validatorResponse.allowedProperties))]);
  handleErrors(validatorResponse.errors);  
}

export class {{replace title (toRegex "(-|\.| )+" "g") "_"}}ValidationPipe implements PipeTransform {
  constructor(private readonly _validatorFn: ValidatorFn) {}
  transform(value: any, _: ArgumentMetadata) {
    handleValidation(value, this._validatorFn, handleRequestValidatorErrors);
    return value;
  }
};

{{!-- first pass register all references --}}
{{#*inline "reference"}}
{{#compare node "===" "ModelDeclaration"}}
{{#registerReference .}}{{>expression id suffix=./modelSuffix prefix=./modelPrefix}}{{/registerReference}}
{{#registerValidator .}}{{>validation.expression id suffix=./validatorSuffix prefix=./validatorPrefix}}{{/registerValidator}}
{{/compare}}
{{/inline}}

{{#each models}}{{>reference modelSuffix="Model" validatorSuffix="ModelValidator"}}{{/each}}
{{#each responses}}{{>reference modelSuffix="Response" validatorSuffix="ResponseValidator"}}{{/each}}
{{#each requests}}{{>reference modelSuffix="Requests" validatorSuffix="RequestsValidator"}}{{/each}}
{{#each pathParameters}}{{>reference modelSuffix="PathParameter" validatorSuffix="PathParameterValidator"}}{{/each}}
{{#each headerParameters}}{{>reference modelSuffix="HeaderParameter" validatorSuffix="HeaderParameterValidator"}}{{/each}}
{{#each queryParameters}}{{>reference modelSuffix="QueryParameter" validatorSuffix="QueryParameterValidator"}}{{/each}}
{{#each cookieParameters}}{{>reference modelSuffix="CookieParameter" validatorSuffix="CookieParameterValidator"}}{{/each}}

{{#if models}}
//#region Models
{{#each models}}
{{>declaration suffix="Model"}}
{{>validation.declaration suffix="ModelValidator"}}
{{/each}}
//#endregion
{{/if}}

{{#if responses}}
//#region Responses
{{#each responses}}
{{>declaration suffix="Response"}}
{{!-- {{>validation.declaration suffix="ResponseValidator"}} --}}
{{/each}}
//#endregion
{{/if}}

{{#if requests}}
//#region Requests
{{#each requests}}
{{>declaration suffix="Requests"}}
{{>validation.declaration suffix="RequestsValidator"}}
{{/each}}
//#endregion
{{/if}}

{{#if pathParameters}}
//#region Path Parameters
{{#each pathParameters}}
{{>declaration suffix="PathParameter"}}
{{>validation.declaration suffix="PathParameterValidator"}}
{{/each}}
//#endregion
{{/if}}

{{#if headerParameters}}
//#region Header Parameters
{{#each headerParameters}}
{{>declaration suffix="HeaderParameter"}}
{{>validation.declaration suffix="HeaderParameterValidator"}}
{{/each}}
//#endregion
{{/if}}

{{#if queryParameters}}
//#region Query Parameters
{{#each queryParameters}}
{{>declaration suffix="QueryParameter"}}
{{>validation.declaration suffix="QueryParameterValidator"}}
{{/each}}
//#endregion
{{/if}}

{{#if cookieParameters}}
//#region Cookie Parameters
{{#each cookieParameters}}
{{>declaration suffix="CookieParameter"}}
{{>validation.declaration suffix="CookieParameterValidator"}}
{{/each}}
//#endregion
{{/if}}

{{#if operations}}
export abstract class {{replace title (toRegex "(-|\.| )+" "g") "_"}}ControllerGenerated {
{{#each operations}}
{{>declaration prefix=(replace ../title (toRegex "(-|\.| )+" "g") "_")}}
{{/each}}
}
{{/if}}

{{/astDocument}}
