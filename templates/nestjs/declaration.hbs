{{>comments}}

{{#compare node "===" "ModelDeclaration"}}
export type {{>expression id suffix=./suffix prefix=./prefix}} = {{>expression definition}}
{{/compare}}

{{~#compare node "===" "PropertyDeclaration"}}
{{>expression id}}{{^required}}?{{/required}}: {{>expression definition enum=./enum}};
{{/compare~}}

{{~#*inline "validator"}}
{{~#compare validation "!==" false}}
{{#compare node "===" "ReferenceExpression"}}
    new {{prefix}}ValidationPipe({{& resolveValidator .}})
{{else}}
    {{log "Only references are support for validation currently" level="warn"}}
{{/compare}}
{{/compare~}}
{{/inline~}}

{{~#*inline "responseValidator"}}
{{~#compare validation "!==" false}}
{{#compare node "===" "OperationResponseExpression"}}
    if(response.$status === {{toInt statusCode}}) {
        handleValidation(response, {{& resolveValidator response}}, handleResponseValidatorErrors);
        }
{{/compare}}
{{/compare~}}
{{/inline~}}

{{~#compare node "===" "OperationDeclaration"}}
protected abstract {{>expression id prefix="_"}}(request: Request,
    {{~#if requests.bodies~}}
    body:{{#requests.bodies}}{{> expression}},{{/requests.bodies}}
    {{~/if~}}    
    {{~#if requests.pathParameters~}}
    path:{{#requests.pathParameters}}{{> expression}},{{/requests.pathParameters}}
    {{~/if~}}
    {{~#if requests.queryParameters~}}
    query:{{#requests.queryParameters}}{{> expression}},{{/requests.queryParameters}}
    {{~/if~}}
    {{~#if requests.headerParameters~}}
    headers:{{#requests.headerParameters}}{{> expression}},{{/requests.headerParameters}}
    {{~/if~}}
): Promise<
    {{^isEmpty responses}}
    {{#forEach responses}}
    {{>expression .}} {{#unless isLast}}|{{/unless}}
    {{/forEach}}
    {{else}}
    void
    {{/isEmpty}}    
    >;
@{{& httpMethod}}('{{replace path (toRegex "{(\w+)}" "g") ":$1"}}')
{{#if (isArray security)}}
{{^isEmpty security}}
    @SetMetadata('scopes', [{{#each security}}{{#each names}}'{{.}}', {{/each}}{{/each}}])
{{else}}
    @SetMetadata('anonymous_auth', true)
{{/isEmpty}}
{{/if}}
async {{>expression id}}(@Req() request: Request,
    {{#if requests.bodies}}    
    @Body({{#requests.bodies}}{{>validator . prefix=../prefix validation=../extensions.x-validation}}{{/requests.bodies}}) body:{{#requests.bodies}}{{> expression}},{{/requests.bodies}}
    {{/if}}
    {{#if requests.pathParameters}}
    @Param({{>validator requests.pathParameters prefix=prefix validation=../extensions.x-validation}}) path:{{#requests.pathParameters}}{{> expression}},{{/requests.pathParameters}}
    {{/if}}    
    {{#if requests.queryParameters}}
    @Query({{>validator requests.queryParameters prefix=prefix validation=../extensions.x-validation}}) query:{{#requests.queryParameters}}{{> expression}},{{/requests.queryParameters}}
    {{/if}}
    {{#if requests.headerParameters}}
    @Headers({{>validator requests.headerParameters prefix=prefix validation=../extensions.x-validation}}) headers:{{#requests.headerParameters}}{{> expression}},{{/requests.headerParameters}}
    {{/if}}
): Promise<
    {{^isEmpty responses}}
    {{#forEach responses}}
    {{>expression .}} {{#unless isLast}}|{{/unless}}
    {{/forEach}}
    {{else}}
    void
    {{/isEmpty}}
    > {
    const response = await this.{{>expression id prefix="_"}}(request,
        {{#if requests.bodies}}body,{{/if}}
        {{#if requests.pathParameters}}path,{{/if}}
        {{#if requests.queryParameters}}query,{{/if}}
        {{#if requests.headerParameters}}headers,{{/if}}
    );
    {{!-- {{^isEmpty responses}}
    {{#forEach responses}}
    {{>responseValidator . prefix=../prefix validation=../extensions.x-validation}}
    {{/forEach}}
    {{/isEmpty}} --}}
    return response;
}

{{#if requests.cookieParameters}}{{log "Cookie parameters not supported yet" level="warn"}}{{/if}}
{{/compare~}}